import java.util.*;
import java.io.*;


public class PasswordCrack {


	private static ArrayList<String> dictionaryList;
	private static ArrayList<User> userList;

	private PasswordCrack() {}
	
	public static void main(String[] args) throws FileNotFoundException {

		if (args.length != 2)
			System.out.println("Usage: java PasswordCrack dictionary passwords");
		else {
			String dictionary = args[0];
			String passwords = args[1];
			// get crackin'
			PasswordCrack.crack(dictionary, passwords);
		}
	}

	public static void crack(String dictionaryFile, String passwordFile) {
		fillDictionaryArray(dictionaryFile);
		// make user class
		fillUserArray(passwordFile);
		
		String test ="hello";
		
		System.out.println(prepend(test,'c'));
		System.out.println(append(test,'c'));
		
		System.out.println(dfirst(test));
		System.out.println(dlast(test));
		System.out.println(reverse(test));
		System.out.println(duplicate(test));
		System.out.println(reflect(test));
		System.out.println(capitalize(test));
		System.out.println(ncapitalize(test));
		// iterate over each user by 
		// 	mangle name
		//	mangle dictionary
		// 	brute force
		// remove user when password cracked

	}

	private static void fillDictionaryArray(String filename) {
		dictionaryList = new ArrayList<String>();
		try {
			Scanner scanner = new Scanner(new File(filename));
			while (scanner.hasNextLine()) {
				String word = scanner.nextLine();
				dictionaryList.add(word);
			}
		} catch (FileNotFoundException e){
			e.printStackTrace();
		}
	}

	private static void fillUserArray(String filename) {
		userList = new ArrayList<User>();
		try {
			Scanner scanner = new Scanner(new File(filename));
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();
				User current = new User(line);

//				 System.out.println(current.getUsername());
//				 System.out.println(current.getHash());
//				 System.out.println(current.getFirstName());
//				 System.out.println(current.getLastName());

				userList.add(current);
			}
		} catch (FileNotFoundException e){
			e.printStackTrace();
		}
	}
	
	
	
	// adds character into word: level 3, will need to loop over every character
	private static String prepend(String input, char letter){
		return letter+input;
	}
	
	// adds character to end of word, will need to loop over every character
	private static String append(String input, char letter){
		return input+letter;
	}
	
	// Deletes the first character from the word
	private static String dfirst(String input){
		return input.substring(1);
	}
	
	// Deletes the last character from the word
	private static String dlast(String input){
		return input.substring(0, input.length()-1);	
	}
		
	// reverses string: ex: hello will be olleh
	private static String reverse(String input){
	    char[] newArray = input.toCharArray();
	    char letter;
	    for(int i=0; i<newArray.length/2; i++) {
	    	letter = newArray[i];
	    	newArray[i] = newArray[newArray.length-i-1];
	    	newArray[newArray.length-i-1] = letter;
	    }
		return String.valueOf(newArray);	
	}
		
	// duplicates string: hellohello
	private static String duplicate(String input){
		return input+input;	
	}
	
	//reflects string: helloolleh
	private static String reflect(String input){
		return input+reverse(input);	
	}
	
	
	private static String upper(String input){
		return input.toUpperCase();	
	}
	
	private static String lower(String input){
		return input.toLowerCase();	
	}
	
	//only first letter capitalize
	private static String capitalize(String input){
		
		return input.toUpperCase().charAt(0)+dfirst(input);	
	}
	
	//first letter lowercase, rest of letters uppercase
	private static String ncapitalize(String input){
		
		return input.toLowerCase().charAt(0)+dfirst(input).toUpperCase();	
	}
} 
/*
game plan:

loop levels
	
	loop users
		name

	loop users
		dictionary (map(word, mangled state))

loop 8->1 (password length)
	brute

*/